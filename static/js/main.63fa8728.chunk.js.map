{"version":3,"sources":["utilities/gameboard/gameboard.js","components/visual_components/Header.js","components/visual_components/Cell.js","components/visual_components/Grid.js","components/visual_components/GridContainer.js","components/visual_components/Ship.js","components/visual_components/Controls.js","components/visual_components/Display.js","utilities/ship/ship.js","utilities/gridHelper.js","components/GameLogic.js","utilities/shipAI/shipAI.js","App.js","index.js"],"names":["Gameboard","gridPlacements","shipIndexes","Map","shotsMissed","shotsLanded","placeShip","ship","coordinates","coord","has","set","get","receiveAttack","shipIndex","findIndex","position","hit","allShipsSunk","oneNotSunk","forEach","val","isSunk","Header","id","Cell","cellData","handleHit","playerTurn","handleCellSelection","cellsSelected","removeCellSelection","cellClickFunction","gameBegun","containsShip","miss","className","includes","length","onMouseOver","onMouseLeave","onClick","e","Grid","props","grid","map","cell","handleShipPlacement","GridContainer","computerTurn","playerGrid","selectedShip","computerGrid","Ship","orientation","shipName","handleShipSelection","Controls","gameMessage","Object","keys","playerShips","rotateShips","Display","hitArray","Array","fill","every","shipPart","buildGrid","cellArray","i","push","returnPlacement","cellIdStr","shipLength","shipRotation","cellIdNum","parseInt","cellPlacements","validPlacement","match","GameLogic","require","useState","playerGameboard","setPlayerGameboard","shipPlacements","returnShipPlacements","tempComputerGrid","tempGridPlacements","shipOK","shipCoordinates","shipOrigin","Math","floor","random","toString","chooseComputerShipPlaces","ship1","ship2","ship3","ship4","ship5","gameboard","populateComputerGameboard","computerGameboard","setComputerGameboard","setPlayerTurn","setGameBegun","setPlayerGrid","setComputerGrid","carrier","battleship","destroyer","submarine","setPlayerShips","setGameMessage","setSelectedShip","setCellsSelected","newShip","updatedGameboard","shipId","playerShipList","removeShip","useEffect","setCellClickFunction","updatePlayerGrid","hitStatus","newGrid","updateComputerGrid","processHit","holder","updateComputerGameboard","updatePlayerGameboard","setTimeout","coordinatesAcceptable","calculateComputerMoveCoordinates","gameOver","winner","alert","event","target","rotatedShips","hoverArray","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63fa8728.chunk.js","sourcesContent":["const Gameboard = () => {\n  const gridPlacements = {};\n  const shipIndexes = new Map();\n  const shotsMissed = {};\n  const shotsLanded = {};\n\n  const placeShip = (ship, coordinates) => {\n    for (let coord of coordinates) {\n      gridPlacements[coord] = ship;\n      if (!shipIndexes.has(ship)) {\n        shipIndexes.set(ship, [coord]);\n      } else {\n        shipIndexes.set(ship, [...shipIndexes.get(ship), coord]);\n      }\n    }\n  }\n\n  const receiveAttack = (coordinates) => {\n    if (coordinates in gridPlacements) {\n      const ship = gridPlacements[coordinates]\n      const shipIndex = shipIndexes.get(ship).findIndex((position) => position == coordinates);\n      shotsLanded[coordinates] = true;\n      return ship.hit(shipIndex);\n    } else shotsMissed[coordinates] = true;\n  }\n\n  const allShipsSunk = () => {\n    let oneNotSunk = false;\n    \n    shipIndexes.forEach((val,ship) => {\n      if (ship.isSunk() === false) oneNotSunk = true;\n    })\n\n    if (oneNotSunk) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return {\n    placeShip,\n    receiveAttack,\n    allShipsSunk,\n    gridPlacements,\n    shipIndexes,\n    shotsMissed,\n    shotsLanded\n  }\n}\nexport default Gameboard;\n","import '../../styles/Header.css';\n\nconst Header = () => {\n  return (\n    <div id=\"header\">\n      <h1>battleship</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import \"../../styles/Cell.css\";\n\nconst Cell = ({ cellData, handleHit, playerTurn, handleCellSelection, cellsSelected, removeCellSelection, cellClickFunction, gameBegun }) => {\n  const { id, containsShip, hit, miss } = cellData;\n  return (\n    <div\n      id={id}\n      className={`${containsShip ? \"ship\" : \"\"} ${hit ? \"hit\" : \"\"} ${\n        miss ? \"miss\" : \"\"} ${(cellsSelected.includes(id)) ? \"hovered\" : \"\"}\n        ${(cellsSelected.length === 1 && cellsSelected[0] === id) ? \"not-allowed\" : \"\"}`}\n      onMouseOver={(gameBegun) ? null : handleCellSelection}\n      onMouseLeave={(gameBegun) ? null : removeCellSelection}\n      onClick={(gameBegun) ? (playerTurn && !hit && !miss ? (e) => handleHit(e) : null) : cellClickFunction}\n    ></div>\n  );\n};\n\nexport default Cell;\n","import \"../../styles/Grid.css\";\nimport Cell from \"./Cell\";\n\nconst Grid = (props) => {\n  return (\n    <div id=\"grid\">\n      {props.grid.map((cell) => {\n        return (\n          <Cell\n            cellData={cell}\n            handleHit={props.handleHit}\n            playerTurn={props.playerTurn}\n            handleCellSelection={props.handleCellSelection}\n            cellsSelected={props.cellsSelected}\n            removeCellSelection={props.removeCellSelection}\n            handleShipPlacement={props.handleShipPlacement}\n            cellClickFunction={props.cellClickFunction}\n            gameBegun={props.gameBegun}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Grid;\n","import \"../../styles/GridContainer.css\";\nimport Grid from \"./Grid\";\n\nconst GridContainer = (props) => {\n  const { playerTurn } = props;\n  const computerTurn = !playerTurn;\n  return (\n    <div id=\"grid-container\">\n      <Grid\n        grid={props.playerGrid}\n        handleHit={props.handleHit}\n        playerTurn={computerTurn}\n        selectedShip={props.selectedShip}\n        handleCellSelection={props.handleCellSelection}\n        cellsSelected={props.cellsSelected}\n        removeCellSelection={props.removeCellSelection}\n        handleShipPlacement={props.handleShipPlacement}\n        cellClickFunction={props.cellClickFunction}\n        gameBegun={props.gameBegun}\n      />\n      {props.gameBegun ? (<Grid\n        grid={props.computerGrid}\n        handleHit={props.handleHit}\n        playerTurn={playerTurn}\n        cellsSelected={props.cellsSelected}\n        gameBegun={props.gameBegun}\n      />) : (null)}\n\n    </div>\n  );\n};\n\nexport default GridContainer;\n","import \"../../styles/Ship.css\";\n\nconst Ship = (props) => {\n  return (\n    <div\n      className={`ship ${props.orientation} ${\n        props.selectedShip === props.shipName ? \"selected\" : \"\"\n      }`}\n      id={props.shipName}\n      onClick={props.handleShipSelection}\n    />\n  );\n};\n\nexport default Ship;\n","import Ship from \"./Ship\";\nimport \"../../styles/Controls.css\";\n\nconst Controls = (props) => {\n  return (\n    <div id=\"controls\">\n      <div id=\"text\">\n        <p>{props.gameMessage}</p>\n      </div>\n      <div id=\"ship-container\">\n        {Object.keys(props.playerShips).map((shipName) => (\n          <Ship\n            shipName={shipName}\n            orientation={props.playerShips[shipName]}\n            selectedShip={props.selectedShip}\n            handleShipSelection={props.handleShipSelection}\n          />\n        ))}\n      </div>\n      {!props.gameBegun ? (<div id=\"button-container\">\n        <button id=\"rotate-ship-btn\" onClick={props.rotateShips}>\n          ROTATE SHIPS\n        </button>\n      </div>) : null }\n      \n    </div>\n  );\n};\n\nexport default Controls;\n","import Header from \"./Header\";\nimport GridContainer from \"./GridContainer\";\nimport Controls from \"./Controls\";\nimport \"../../styles/Display.css\";\n\nconst Display = (props) => {\n  return (\n    <div id=\"display-container\">\n      <Header />\n      <Controls\n        playerShips={props.playerShips}\n        rotateShips={props.rotateShips}\n        selectedShip={props.selectedShip}\n        handleShipSelection={props.handleShipSelection}\n        gameBegun={props.gameBegun}\n        gameMessage={props.gameMessage}\n      />\n      <GridContainer\n        handleHit={props.handleHit}\n        playerGrid={props.playerGrid}\n        computerGrid={props.computerGrid}\n        playerTurn={props.playerTurn}\n        gameBegun={props.gameBegun}\n        selectedShip={props.selectedShip}\n        handleCellSelection={props.handleCellSelection}\n        cellsSelected={props.cellsSelected}\n        removeCellSelection={props.removeCellSelection}\n        handleShipPlacement={props.handleShipPlacement}\n        cellClickFunction={props.cellClickFunction}\n      />\n    </div>\n  );\n};\n\nexport default Display;\n","const Ship = (length) => {\n  const hitArray = new Array(length).fill(null);\n\n  const hit = (position) => {\n    hitArray[position] = 'X';\n  }\n\n  const isSunk = () => {\n    return hitArray.every((shipPart) => shipPart === 'X');\n  } \n\n  return {\n    length,\n    hitArray,\n    hit,\n    isSunk\n  }\n}\n\nexport default Ship;","const buildGrid = (gridPlacements = false) => {\n    const cellArray = [];\n    for (let i = 0; i < 100; i++) {\n      let cell = {};\n      cell.id = i;\n      if (gridPlacements && gridPlacements[i]) {\n        cell.containsShip = true;\n      }\n      cellArray.push(cell);\n    }\n    return cellArray;\n  };\n\n  const returnPlacement = (cellIdStr, shipLength, shipRotation, grid) => {\n    const cellIdNum = parseInt(cellIdStr);\n    const cellPlacements = [cellIdNum];\n    let validPlacement = true;\n    if (shipRotation === \"horizontal\") {\n      switch (shipLength) {\n        case 5:\n          if (\n            (cellIdStr.match(/[0-5]$/) || cellIdStr.match(/.[0-5]$/)) &&\n            !grid[cellIdNum].containsShip\n          ) {\n            for (let i = 1; i < shipLength; i++) {\n              if (grid[cellIdNum + i].containsShip) {\n                validPlacement = false;\n                break;\n              }\n              cellPlacements.push(cellIdNum + i);\n            }\n          } else {\n            validPlacement = false;\n          }\n          break;\n        case 4:\n          if (\n            (cellIdStr.match(/[0-6]$/) || cellIdStr.match(/.[0-6]$/)) &&\n            !grid[cellIdNum].containsShip\n          ) {\n            for (let i = 1; i < shipLength; i++) {\n              if (grid[cellIdNum + i].containsShip) {\n                validPlacement = false;\n                break;\n              }\n              cellPlacements.push(cellIdNum + i);\n            }\n          } else {\n            validPlacement = false;\n          }\n          break;\n        case 3:\n          if (\n            (cellIdStr.match(/[0-7]$/) || cellIdStr.match(/.[0-7]$/)) &&\n            !grid[cellIdNum].containsShip\n          ) {\n            for (let i = 1; i < shipLength; i++) {\n              if (grid[cellIdNum + i].containsShip) {\n                validPlacement = false;\n                break;\n              }\n              cellPlacements.push(cellIdNum + i);\n            }\n          } else {\n            validPlacement = false;\n          }\n          break;\n        case 2:\n          if (\n            (cellIdStr.match(/[0-8]$/) || cellIdStr.match(/.[0-8]$/)) &&\n            !grid[cellIdNum].containsShip\n          ) {\n            for (let i = 1; i < shipLength; i++) {\n              if (grid[cellIdNum + i].containsShip) {\n                validPlacement = false;\n                break;\n              }\n              cellPlacements.push(cellIdNum + i);\n            }\n          } else {\n            validPlacement = false;\n          }\n          break;\n        default:\n          break;\n      }\n    } else {\n      switch (shipLength) {\n        case 5:\n          if (\n            (cellIdStr.match(/^[0-9]$/) || cellIdStr.match(/[1-5].$/)) &&\n            !grid[cellIdNum].containsShip\n          ) {\n            for (let i = 1; i < shipLength; i++) {\n              if (grid[cellIdNum + i * 10].containsShip) {\n                validPlacement = false;\n                break;\n              }\n              cellPlacements.push(cellIdNum + i * 10);\n            }\n          } else {\n            validPlacement = false;\n          }\n          break;\n        case 4:\n          if (\n            (cellIdStr.match(/^[0-9]$/) || cellIdStr.match(/[0-6].$/)) &&\n            !grid[cellIdNum].containsShip\n          ) {\n            for (let i = 1; i < shipLength; i++) {\n              if (grid[cellIdNum + i * 10].containsShip) {\n                validPlacement = false;\n                break;\n              }\n              cellPlacements.push(cellIdNum + i * 10);\n            }\n          } else {\n            validPlacement = false;\n          }\n          break;\n        case 3:\n          if (\n            (cellIdStr.match(/^[0-9]$/) || cellIdStr.match(/[0-7].$/)) &&\n            !grid[cellIdNum].containsShip\n          ) {\n            for (let i = 1; i < shipLength; i++) {\n              if (grid[cellIdNum + i * 10].containsShip) {\n                validPlacement = false;\n                break;\n              }\n              cellPlacements.push(cellIdNum + i * 10);\n            }\n          } else {\n            validPlacement = false;\n          }\n          break;\n        case 2:\n          if (\n            (cellIdStr.match(/^[0-9]$/) || cellIdStr.match(/[0-8].$/)) &&\n            !grid[cellIdNum].containsShip\n          ) {\n            for (let i = 1; i < shipLength; i++) {\n              if (grid[cellIdNum + i * 10].containsShip) {\n                validPlacement = false;\n                break;\n              }\n              cellPlacements.push(cellIdNum + i * 10);\n            }\n          } else {\n            validPlacement = false;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return validPlacement ? cellPlacements : false;\n  }\n\nexport {buildGrid, returnPlacement};\n","import { React } from \"react\";\nimport Gameboard from \"../utilities/gameboard/gameboard\";\nimport Display from \"./visual_components/Display\";\nimport Ship from \"../utilities/ship/ship\";\nimport { buildGrid, returnPlacement } from \"../utilities/gridHelper\";\nimport {\n  calculateComputerMoveCoordinates,\n  chooseComputerShipPlaces,\n} from \"../utilities/shipAI/shipAI\";\nimport { useState, useEffect } from \"react\";\nconst clonedeep = require(\"../../node_modules/lodash.clonedeep\");\n\nconst GameLogic = () => {\n  // Initialize state variables\n\n  const [playerGameboard, setPlayerGameboard] = useState(Gameboard());\n\n  const populateComputerGameboard = () => {\n    const shipPlacements = chooseComputerShipPlaces();\n    const ship1 = Ship(5);\n    const ship2 = Ship(4);\n    const ship3 = Ship(3);\n    const ship4 = Ship(3);\n    const ship5 = Ship(2);\n\n    let gameboard = Gameboard();\n    gameboard.placeShip(ship1, shipPlacements[0]);\n    gameboard.placeShip(ship2, shipPlacements[1]);\n    gameboard.placeShip(ship3, shipPlacements[2]);\n    gameboard.placeShip(ship4, shipPlacements[3]);\n    gameboard.placeShip(ship5, shipPlacements[4]);\n    return gameboard;\n  };\n\n  const [computerGameboard, setComputerGameboard] = useState(\n    populateComputerGameboard()\n  );\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [gameBegun, setGameBegun] = useState(false);\n  const [playerGrid, setPlayerGrid] = useState(\n    buildGrid(playerGameboard.gridPlacements)\n  );\n  const [computerGrid, setComputerGrid] = useState(buildGrid());\n  const [playerShips, setPlayerShips] = useState({\n    carrier: \"horizontal\",\n    battleship: \"horizontal\",\n    destroyer: \"horizontal\",\n    submarine: \"horizontal\",\n    \"patrol-boat\": \"horizontal\",\n  });\n  const shipLength = {\n    carrier: 5,\n    battleship: 4,\n    destroyer: 3,\n    submarine: 3,\n    \"patrol-boat\": 2,\n  };\n  const [gameMessage, setGameMessage] = useState(\n    \"Please select and place all ships\"\n  );\n\n  // Allow player to select and place ships\n  const [selectedShip, setSelectedShip] = useState({});\n  const [cellsSelected, setCellsSelected] = useState([]);\n\n  const handleShipSelection = (e) => {\n    setSelectedShip(e.target.id);\n  };\n\n  // Determines if hovered cell is a valid place for ship\n  const handleCellSelection = (e) => {\n    const hoverArray = returnPlacement(\n      e.target.id,\n      shipLength[selectedShip],\n      playerShips[selectedShip],\n      playerGrid\n    );\n    // why not just return hover array? check later\n    setCellsSelected(hoverArray ? hoverArray : [parseInt(e.target.id)]);\n  };\n\n  const removeCellSelection = () => {\n    setCellsSelected([]);\n  };\n\n  const removeShip = (shipId) => {\n    let playerShipList = { ...playerShips };\n    delete playerShipList[shipId];\n    setPlayerShips(playerShipList);\n    setSelectedShip({});\n  };\n\n  const handleShipPlacement = (e) => {\n    const newShip = Ship(cellsSelected.length);\n    let updatedGameboard = { ...playerGameboard };\n    updatedGameboard.placeShip(newShip, cellsSelected);\n    removeCellSelection();\n    setPlayerGameboard(updatedGameboard);\n    removeShip(selectedShip);\n  };\n\n  useEffect(() => {\n    if (!gameBegun) setPlayerGrid(buildGrid(playerGameboard.gridPlacements));\n  }, [playerGameboard]);\n\n  // Cell components only have the function to place ships if the placement is valid\n  const [cellClickFunction, setCellClickFunction] = useState();\n\n  useEffect(() => {\n    if (cellsSelected.length === 1) {\n      setCellClickFunction(null);\n    } else {\n      setCellClickFunction(() => handleShipPlacement);\n    }\n  }, [cellsSelected]);\n\n  // Start game once user has placed all ships\n  useEffect(() => {\n    if (Object.keys(playerShips).length === 0) setGameBegun(true);\n  }, [playerShips]);\n\n  const rotateShips = (e) => {\n    const rotatedShips = { ...playerShips };\n    for (let ship in rotatedShips) {\n      rotatedShips[ship] =\n        rotatedShips[ship] === \"horizontal\" ? \"vertical\" : \"horizontal\";\n    }\n    setPlayerShips(rotatedShips);\n  };\n\n  const switchTurns = () => {\n    setPlayerTurn(!playerTurn);\n  };\n\n  useEffect(() => {\n    if (gameBegun && playerTurn) {\n      setGameMessage(\"It is the Player's Turn\");\n    } else if (gameBegun && !playerTurn) {\n      setGameMessage(\"It is the Computer's Turn\");\n    }\n  }, [playerTurn, gameBegun]);\n\n  const updatePlayerGameboard = (coordinates) => {\n    let holder = { ...playerGameboard };\n    holder.receiveAttack(coordinates);\n    setPlayerGameboard(holder);\n  };\n\n  const updateComputerGameboard = (coordinates) => {\n    let holder = { ...computerGameboard };\n    holder.receiveAttack(coordinates);\n    setComputerGameboard(holder);\n  };\n\n  const updatePlayerGrid = (coordinates, hitStatus) => {\n    const newGrid = [...playerGrid];\n    newGrid[coordinates][hitStatus] = true;\n    setPlayerGrid(newGrid);\n  };\n\n  const updateComputerGrid = (coordinates, hitStatus) => {\n    const newGrid = [...computerGrid];\n    newGrid[coordinates][hitStatus] = true;\n    setComputerGrid(newGrid);\n  };\n\n  // Prevents user from making move for computer. Should refactor so the player grid does not receive the handleHit function\n  const handleHit = (event) => {\n    if (!playerTurn) return;\n    const coordinates = event.target.id;\n    processHit(coordinates);\n  };\n\n  const processHit = (coordinates) => {\n    if (playerTurn) {\n      var gameboard = computerGameboard;\n      updateComputerGameboard(coordinates);\n    } else {\n      var gameboard = playerGameboard;\n      updatePlayerGameboard(coordinates);\n    }\n\n    if (gameboard.gridPlacements[coordinates]) {\n      playerTurn\n        ? updateComputerGrid(coordinates, \"hit\")\n        : updatePlayerGrid(coordinates, \"hit\");\n    } else {\n      playerTurn\n        ? updateComputerGrid(coordinates, \"miss\")\n        : updatePlayerGrid(coordinates, \"miss\");\n    }\n\n    switchTurns();\n  };\n\n  useEffect(() => {\n    if (!playerTurn) {\n      setTimeout(\n        () => processHit(calculateComputerMoveCoordinates(playerGameboard)),\n        750\n      );\n    }\n  }, [playerTurn]);\n\n  const gameOver = (winner) => {\n    alert(\"gameover\");\n  };\n\n  useEffect(() => {\n    if (gameBegun && playerGameboard.allShipsSunk()) gameOver(\"player\");\n  }, [playerGameboard]);\n\n  useEffect(() => {\n    if (gameBegun && computerGameboard.allShipsSunk()) gameOver(\"computer\");\n  }, [computerGameboard]);\n\n  return (\n    <Display\n      playerGrid={playerGrid}\n      computerGrid={computerGrid}\n      handleHit={handleHit}\n      playerTurn={playerTurn}\n      gameBegun={gameBegun}\n      playerShips={playerShips}\n      rotateShips={rotateShips}\n      selectedShip={selectedShip}\n      handleShipSelection={handleShipSelection}\n      handleCellSelection={handleCellSelection}\n      cellsSelected={cellsSelected}\n      removeCellSelection={removeCellSelection}\n      handleShipPlacement={handleShipPlacement}\n      cellClickFunction={cellClickFunction}\n      gameMessage={gameMessage}\n    />\n  );\n};\n\nexport default GameLogic;\n","import { buildGrid, returnPlacement } from \"../gridHelper\";\n\nconst calculateComputerMoveCoordinates = (playerGameboard) => {\n  let coordinatesAcceptable = false;\n  let coordinates = null;\n  while (!coordinatesAcceptable) {\n    coordinates = Math.floor(Math.random() * (99 + 1));\n    if (\n      !playerGameboard.shotsLanded[coordinates] &&\n      !playerGameboard.shotsMissed[coordinates]\n    )\n      coordinatesAcceptable = true;\n  }\n  return coordinates;\n};\n\nconst chooseComputerShipPlaces = () => {\n  let returnShipPlacements = [];\n  let tempComputerGrid = buildGrid();\n  let tempGridPlacements = {};\n  const shipLengths = [5, 4, 3, 3, 2];\n  for (let shipLength of shipLengths) {\n    let shipOK = false;\n    let shipCoordinates = [];\n    while (!shipOK) {\n      let shipOrigin = Math.floor(Math.random() * (99 + 1));\n      let shipRotation =\n        Math.floor(Math.random() * 2) > 0 ? \"horizontal\" : \"vertical\";\n      shipCoordinates = returnPlacement(\n        shipOrigin.toString(),\n        shipLength,\n        shipRotation,\n        tempComputerGrid\n      );\n      shipOK = (shipCoordinates) ? true : false;\n    }\n    for (let coordinate of shipCoordinates) {\n      tempGridPlacements[coordinate] = true;\n    }\n    tempComputerGrid = buildGrid(tempGridPlacements);\n    returnShipPlacements.push(shipCoordinates);\n  }\n  return returnShipPlacements;\n};\n\nexport {calculateComputerMoveCoordinates, chooseComputerShipPlaces};\n","import './styles/App.css';\nimport GameLogic from './components/GameLogic';\n\nfunction App() {\n  return (\n    <GameLogic />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}